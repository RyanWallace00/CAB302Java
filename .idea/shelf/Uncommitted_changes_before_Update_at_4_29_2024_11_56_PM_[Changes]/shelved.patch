Index: src/main/java/com/example/cab302javaproject/LifestyleCalendar.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * LifestyleCalendar, a JavaFX application for promoting and managing a better work/life balance whilst taking into consideration health safety aspects such as eye-strain warnings\r\n * It includes features like user authentication, profile management, and event scheduling.\r\n */\r\npackage com.example.cab302javaproject; // Declares the package name for the Java class\r\n\r\nimport javafx.application.Application; // Imports the Application class from the JavaFX library\r\nimport javafx.geometry.Insets; // Imports the Insets class from the JavaFX library for creating padding around UI elements\r\nimport javafx.geometry.Pos; // Imports the Pos class from the JavaFX library for positioning UI elements\r\nimport javafx.scene.Scene; // Imports the Scene class from the JavaFX library for creating the main window\r\nimport javafx.scene.control.*; // Imports all classes related to UI controls from the JavaFX library\r\nimport javafx.scene.image.ImageView; // Imports the ImageView class from the JavaFX library for displaying images\r\nimport javafx.scene.layout.*; // Imports all classes related to UI layout from the JavaFX library\r\nimport javafx.scene.text.Font; // Imports the Font class from the JavaFX library for setting text styles\r\nimport javafx.scene.text.TextAlignment; // Imports the TextAlignment class from the JavaFX library for setting text alignment\r\nimport javafx.stage.Stage; // Imports the Stage class from the JavaFX library for creating the main window\r\nimport javafx.scene.image.Image; // Imports the Image class from the JavaFX library for loading images\r\n\r\nimport java.util.*;\r\nimport java.util.concurrent.atomic.AtomicReference; // Imports the AtomicReference class from the Java concurrent package for thread-safe reference handling\r\nimport java.io.*; // Imports all classes related to input/output from the Java I/O package\r\nimport java.io.Serializable; // Imports the Serializable interface from the Java I/O package for serializing objects\r\nimport java.io.FileInputStream; // Imports the FileInputStream class from the Java I/O package for reading from files\r\nimport java.io.FileOutputStream; // Imports the FileOutputStream class from the Java I/O package for writing to files\r\nimport java.io.ObjectInputStream; // Imports the ObjectInputStream class from the Java I/O package for deserializing objects\r\nimport java.io.ObjectOutputStream; // Imports the ObjectOutputStream class from the Java I/O package for serializing objects\r\nimport java.time.ZonedDateTime; // Imports the ZonedDateTime class from the Java time package for representing dates and times\r\n\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.shape.Rectangle;\r\n\r\nimport javafx.scene.control.TableColumn;\r\nimport javafx.scene.control.TableView;\r\nimport javafx.scene.layout.BorderPane;\r\nimport javafx.scene.layout.HBox;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.beans.property.SimpleStringProperty;\r\nimport javafx.scene.control.ComboBox;\r\n\r\nimport java.time.LocalDate;\r\nimport java.time.LocalTime;\r\nimport java.time.LocalDateTime;\r\nimport java.util.UUID;\r\nimport java.text.DateFormat;\r\n\r\n\r\n/**\r\n * The LifestyleCalendar class extends the Application class and serves as the main entry point for the application.\r\n */\r\npublic class LifestyleCalendar extends Application { // Defines the LifestyleCalendar class which extends the Application class from JavaFX\r\n    private Stage primaryStage; // Declares a private instance variable to hold the primary stage (main window)\r\n    private StackPane rootPane; // Declares a private instance variable to hold the root pane (main container)\r\n    private HashMap<UUID, UserDetails> userDetailsMap; // Declares a private instance variable to hold a map of user details keyed by UUID\r\n    private HashMap<Optional<UUID>, CalendarDetails> calendarDetailsMap; // Declares a private instance variable to hold a map of calendar details keyed by UUID\r\n    private UserDetails loggedInUser; // Declares a private instance variable to hold the currently logged-in user's details\r\n    private Image image; // Declares a private instance variable to hold the application logo image\r\n\r\n    /**\r\n     * The start method initializes the primary stage and displays the home page.\r\n     * @param stage The primary stage for the JavaFX application.\r\n     */\r\n    @Override // Overrides the start method from the Application class\r\n    public void start(Stage stage) { // Defines the start method which takes a Stage object as a parameter\r\n        primaryStage = stage; // Assigns the passed Stage object to the primaryStage instance variable\r\n        rootPane = new StackPane(); // Creates a new instance of StackPane and assigns it to the rootPane instance variable\r\n        userDetailsMap = new HashMap<UUID, UserDetails>(); // Creates a new instance of HashMap and assigns it to the userDetailsMap instance variable\r\n        calendarDetailsMap = new HashMap<Optional<UUID>, CalendarDetails>(); // Creates a new instance of HashMap and assigns it to the calendarDetailsMap instance variable\r\n        Scene scene = new Scene(rootPane, 600, 400); // Creates a new Scene object with the rootPane as the root node and dimensions of 600x400\r\n        stage.setTitle(\"Lifestyle Calendar!\"); // Sets the title of the primary stage\r\n        stage.setScene(scene); // Sets the scene of the primary stage\r\n        stage.show(); // Displays the primary stage\r\n        image = new Image(\"LifestyleCalendarLogo.png\"); // Creates a new Image object by loading the \"LifestyleCalendarLogo.png\" file\r\n        stage.getIcons().add(new Image(\"LifestyleCalendarLogoCalendar.png\")); // Adds the loaded image as an icon to the primary stage\r\n        loadUserData(); // Calls the loadUserData method to load user data from a file\r\n        showHomePage(); // Calls the showHomePage method to display the home page\r\n    }\r\n\r\n    /**\r\n     * Displays the home page with login and signup options.\r\n     */\r\n    private void showHomePage() { // Defines a private method to display the home page\r\n        BorderPane homePane = new BorderPane(); // Creates a new instance of BorderPane and assigns it to the homePane variable\r\n        ImageView imageView = new ImageView(); // Creates a new instance of ImageView and assigns it to the imageView variable\r\n        imageView.setFitWidth(200); // Sets the fitted width of the ImageView to 200\r\n        imageView.setFitHeight(150); // Sets the fitted height of the ImageView to 150\r\n        imageView.setPreserveRatio(true); // Sets the ImageView to preserve the aspect ratio of the image\r\n        imageView.setSmooth(true); // Enables smooth scaling for the ImageView\r\n        imageView.setCache(true); // Enables caching for the ImageView\r\n        imageView.setImage(image); // Sets the image of the ImageView to the loaded application logo\r\n        BorderPane.setAlignment(imageView, Pos.TOP_CENTER); // Aligns the ImageView to the top center of the BorderPane\r\n        VBox buttonBox = new VBox(10); // Creates a new instance of VBox with a spacing of 10 and assigns it to the buttonBox variable\r\n        buttonBox.setPadding(new Insets(10)); // Sets the padding of the VBox to 10\r\n        buttonBox.setAlignment(Pos.CENTER); // Aligns the contents of the VBox to the center\r\n        Button loginButton = new Button(\"LOGIN\"); // Creates a new instance of Button with the text \"LOGIN\" and assigns it to the loginButton variable\r\n        loginButton.setOnAction(event -> showLoginScreen()); // Sets an event handler for the loginButton to call the showLoginScreen method\r\n        Button signUpButton = new Button(\"SIGN UP\"); // Creates a new instance of Button with the text \"SIGN UP\" and assigns it to the signUpButton variable\r\n        signUpButton.setOnAction(event -> showSignUpScreen()); // Sets an event handler for the signUpButton to call the showSignUpScreen method\r\n        buttonBox.getChildren().addAll(imageView,loginButton, signUpButton); // Adds the ImageView, loginButton, and signUpButton to the buttonBox\r\n        homePane.setCenter(buttonBox); // Sets the center of the homePane to the buttonBox\r\n        rootPane.getChildren().setAll(homePane); // Sets the contents of the rootPane to the homePane\r\n    }\r\n\r\n    private void showLoginScreen() { // Defines a private method to display the login screen\r\n        BorderPane loginPane = new BorderPane(); // Creates a new instance of BorderPane and assigns it to the loginPane variable\r\n        ImageView imageView = new ImageView(); // Creates a new instance of ImageView and assigns it to the imageView variable\r\n        imageView.setFitWidth(200); // Sets the fitted width of the ImageView to 200\r\n        imageView.setFitHeight(150); // Sets the fitted height of the ImageView to 150\r\n        imageView.setPreserveRatio(true); // Sets the ImageView to preserve the aspect ratio of the image\r\n        imageView.setSmooth(true); // Enables smooth scaling for the ImageView\r\n        imageView.setCache(true); // Enables caching for the ImageView\r\n        imageView.setImage(image); // Sets the image of the ImageView to the loaded application logo\r\n        BorderPane.setAlignment(imageView, Pos.TOP_CENTER); // Aligns the ImageView to the top center of the BorderPane\r\n        VBox centerBox = new VBox(10); // Creates a new instance of VBox with a spacing of 10 and assigns it to the centerBox variable\r\n        centerBox.setAlignment(Pos.CENTER); // Aligns the contents of the VBox to the center\r\n        centerBox.setPadding(new Insets(10)); // Sets the padding of the VBox to 10\r\n        Label informationLabel = new Label(\"Please enter your account details below:\"); // Creates a new instance of Label with the text \"Please enter your account details below:\" and assigns it to the informationLabel variable\r\n        informationLabel.setFont(new Font(15)); // Sets the font size of the Label to 15\r\n        informationLabel.setAlignment(Pos.CENTER); // Aligns the text of the Label to the center\r\n        VBox formBox = new VBox(5); // Creates a new instance of VBox with a spacing of 5 and assigns it to the formBox variable\r\n        Label emailLabel = new Label(\"Email\"); // Creates a new instance of Label with the text \"Email\" and assigns it to the emailLabel variable\r\n        TextField emailField = new TextField(); // Creates a new instance of TextField and assigns it to the emailField variable\r\n        Label passwordLabel = new Label(\"Password\"); // Creates a new instance of Label with the text \"Password\" and assigns it to the passwordLabel variable\r\n        TextField passwordField = new TextField(); // Creates a new instance of TextField and assigns it to the passwordField variable\r\n        formBox.getChildren().addAll(emailLabel, emailField, passwordLabel, passwordField); // Adds the emailLabel, emailField, passwordLabel, and passwordField to the formBox\r\n        formBox.setAlignment(Pos.CENTER_LEFT); // Aligns the contents of the formBox to the center-left\r\n        HBox buttonsBox = new HBox(10); // Creates a new instance of HBox with a spacing of 10 and assigns it to the buttonsBox variable\r\n        Button loginButton = new Button(\"LOGIN\"); // Creates a new instance of Button with the text \"LOGIN\" and assigns it to the loginButton variable\r\n        Button cancelButton = new Button(\"CANCEL\"); // Creates a new instance of Button with the text \"CANCEL\" and assigns it to the cancelButton variable\r\n        buttonsBox.getChildren().addAll(loginButton, cancelButton); // Adds the loginButton and cancelButton to the buttonsBox\r\n        buttonsBox.setAlignment(Pos.CENTER); // Aligns the contents of the buttonsBox to the center\r\n        cancelButton.setOnAction(event -> showHomePage()); // Sets an event handler for the cancelButton to call the showHomePage method\r\n        loginButton.setOnAction(event -> { // Sets an event handler for the loginButton\r\n            String email = emailField.getText(); // Gets the text from the emailField and assigns it to the email variable\r\n            String password = passwordField.getText(); // Gets the text from the passwordField and assigns it to the password variable\r\n            if (authenticateUser(email, password)) { // Calls the authenticateUser method with the email and password, and checks if the user is authenticated\r\n                loadCalendarData(); // Calls the loadCalendarData method to load calendar data from a file\r\n                showCalendarScreen(); // Calls the showCalendarScreen method to display the calendar screen\r\n            } else {\r\n                showAlert(\"Invalid email or password.\"); // Displays an alert with the message \"Invalid email or password.\"\r\n            }\r\n        });\r\n        centerBox.getChildren().addAll(imageView, informationLabel, formBox, buttonsBox); // Adds the imageView, informationLabel, formBox, and buttonsBox to the centerBox\r\n        loginPane.setCenter(centerBox); // Sets the center of the loginPane to the centerBox\r\n        rootPane.getChildren().setAll(loginPane); // Sets the contents of the rootPane to the loginPane\r\n    }\r\n\r\n    private void showSignUpScreen() { // Defines a private method to display the sign-up screen\r\n        BorderPane signUpPane = new BorderPane(); // Creates a new instance of BorderPane and assigns it to the signUpPane variable\r\n        ImageView imageView = new ImageView(); // Creates a new instance of ImageView and assigns it to the imageView variable\r\n        imageView.setFitWidth(200); // Sets the fitted width of the ImageView to 200\r\n        imageView.setFitHeight(150); // Sets the fitted height of the ImageView to 150\r\n        imageView.setPreserveRatio(true); // Sets the ImageView to preserve the aspect ratio of the image\r\n        imageView.setSmooth(true); // Enables smooth scaling for the ImageView\r\n        imageView.setCache(true); // Enables caching for the ImageView\r\n        imageView.setImage(image); // Sets the image of the ImageView to the loaded application logo\r\n        signUpPane.setTop(imageView); // Sets the ImageView as the top node of the signUpPane\r\n        BorderPane.setAlignment(imageView, Pos.TOP_CENTER); // Aligns the ImageView to the top center of the BorderPane\r\n        VBox signUpBox = new VBox(10); // Creates a new instance of VBox with a spacing of 10 and assigns it to the signUpBox variable\r\n        signUpBox.setPadding(new Insets(0,10,30,10)); // Sets the padding of the VBox to 0 (top), 10 (right), 30 (bottom), 10 (left)\r\n        signUpBox.setAlignment(Pos.CENTER); // Aligns the contents of the VBox to the center\r\n        Label questionLabel = new Label(\"Please answer the following questions:\"); // Creates a new instance of Label with the text \"Please answer the following questions:\" and assigns it to the questionLabel variable\r\n        questionLabel.setFont(new Font(15)); // Sets the font size of the Label to 15\r\n        Label accountTypeLabel = new Label(\"Select your account type below:\"); // Creates a new instance of Label with the text \"Select your account type below:\" and assigns it to the accountTypeLabel variable\r\n        ToggleGroup accountTypeGroup = new ToggleGroup(); // Creates a new instance of ToggleGroup and assigns it to the accountTypeGroup variable\r\n        HBox accountTypeBox = new HBox(10); // Creates a new instance of HBox with a spacing of 10 and assigns it to the accountTypeBox variable\r\n        accountTypeBox.setAlignment(Pos.CENTER); // Aligns the contents of the HBox to the center\r\n        ToggleButton personalButton = new ToggleButton(\"Personal\"); // Creates a new instance of ToggleButton with the text \"Personal\" and assigns it to the personalButton variable\r\n        personalButton.setToggleGroup(accountTypeGroup); // Associates the personalButton with the accountTypeGroup\r\n        ToggleButton managerButton = new ToggleButton(\"Manager\"); // Creates a new instance of ToggleButton with the text \"Manager\" and assigns it to the managerButton variable\r\n        managerButton.setToggleGroup(accountTypeGroup); // Associates the managerButton with the accountTypeGroup\r\n        ToggleButton employeeButton = new ToggleButton(\"Employee\"); // Creates a new instance of ToggleButton with the text \"Employee\" and assigns it to the employeeButton variable\r\n        employeeButton.setToggleGroup(accountTypeGroup); // Associates the employeeButton with the accountTypeGroup\r\n        accountTypeBox.getChildren().addAll(personalButton, managerButton, employeeButton); // Adds the personalButton, managerButton, and employeeButton to the accountTypeBox\r\n        VBox formBox = new VBox(5); // Creates a new instance of VBox with a spacing of 5 and assigns it to the formBox variable\r\n        Label nameLabel = new Label(\"Name\"); // Creates a new instance of Label with the text \"Name\" and assigns it to the nameLabel variable\r\n        TextField nameField = new TextField(); // Creates a new instance of TextField and assigns it to the nameField variable\r\n        Label emailLabel = new Label(\"Email\"); // Creates a new instance of Label with the text \"Email\" and assigns it to the emailLabel variable\r\n        TextField emailField = new TextField(); // Creates a new instance of TextField and assigns it to the emailField variable\r\n        Label passwordLabel = new Label(\"Password\"); // Creates a new instance of Label with the text \"Password\" and assigns it to the passwordLabel variable\r\n        TextField passwordField = new TextField(); // Creates a new instance of TextField and assigns it to the passwordField variable\r\n        formBox.getChildren().addAll(nameLabel, nameField, emailLabel, emailField, passwordLabel, passwordField); // Adds the nameLabel, nameField, emailLabel, emailField, passwordLabel, and passwordField to the formBox\r\n        formBox.setAlignment(Pos.CENTER_LEFT); // Aligns the contents of the formBox to the center-left\r\n        HBox buttonsBox = new HBox(10); // Creates a new instance of HBox with a spacing of 10 and assigns it to the buttonsBox variable\r\n        buttonsBox.setAlignment(Pos.CENTER); // Aligns the contents of the HBox to the center\r\n        Button signUpButton = new Button(\"SIGN UP\"); // Creates a new instance of Button with the text \"SIGN UP\" and assigns it to the signUpButton variable\r\n        Button cancelButton = new Button(\"CANCEL\"); // Creates a new instance of Button with the text \"CANCEL\" and assigns it to the cancelButton variable\r\n        cancelButton.setOnAction(event -> showHomePage()); // Sets an event handler for the cancelButton to call the showHomePage method\r\n        buttonsBox.getChildren().addAll(signUpButton, cancelButton); // Adds the signUpButton and cancelButton to the buttonsBox\r\n        signUpButton.setOnAction(event -> { // Sets an event handler for the signUpButton\r\n            final String name = nameField.getText(); // Gets the text from the nameField and assigns it to the name variable\r\n            final String email = emailField.getText(); // Gets the text from the emailField and assigns it to the email variable\r\n            final String password = passwordField.getText(); // Gets the text from the passwordField and assigns it to the password variable\r\n            AtomicReference<String> atomicSelectedAccountType = new AtomicReference<>(); // Creates a new instance of AtomicReference<String> and assigns it to the atomicSelectedAccountType variable\r\n            Toggle selectedToggle = accountTypeGroup.getSelectedToggle(); // Gets the currently selected Toggle from the accountTypeGroup and assigns it to the selectedToggle variable\r\n            if (selectedToggle != null) { // Checks if a Toggle is selected\r\n                atomicSelectedAccountType.set(((ToggleButton) selectedToggle).getText()); // Gets the text of the selected ToggleButton and sets it to the atomicSelectedAccountType\r\n            }\r\n            accountTypeGroup.selectedToggleProperty().addListener((observable, oldValue, newValue) -> { // Adds a listener to the selectedToggleProperty of the accountTypeGroup\r\n                if (newValue != null) { // Checks if a new Toggle is selected\r\n                    atomicSelectedAccountType.set(((ToggleButton) newValue).getText()); // Gets the text of the newly selected ToggleButton and sets it to the atomicSelectedAccountType\r\n                }\r\n            });\r\n            final String selectedAccountType = atomicSelectedAccountType.get(); // Gets the value of the atomicSelectedAccountType and assigns it to the selectedAccountType variable\r\n            if (isEmailRegistered(email)) { // Calls the isEmailRegistered method with the email, and checks if the email is already registered\r\n                showAlert(\"Email already exists.\"); // Displays an alert with the message \"Email already exists.\"\r\n            } else if (selectedAccountType == null) { // Checks if no account type is selected\r\n                showAlert(\"Please select an account type.\"); // Displays an alert with the message \"Please select an account type.\"\r\n            } else {\r\n                final UUID userId = UUID.randomUUID(); // Generates a new random UUID and assigns it to the userId variable\r\n                Optional<UUID> linkingCode = Optional.empty(); // Creates an empty Optional<UUID> and assigns it to the linkingCode variable\r\n                if (selectedAccountType.equals(\"Manager\")) { // Checks if the selected account type is \"Manager\"\r\n                    // Create a popup for Manager account type\r\n                    Stage popupStage = new Stage(); // Creates a new instance of Stage and assigns it to the popupStage variable\r\n                    VBox popupVBox = new VBox(); // Creates a new instance of VBox and assigns it to the popupVBox variable\r\n                    popupVBox.setAlignment(Pos.CENTER); // Aligns the contents of the popupVBox to the center\r\n                    popupVBox.setSpacing(10); // Sets the spacing between children of the popupVBox to 10\r\n                    Label popupLabel = new Label(\"Below is your linking code for your employees to connect to you,\\nand allow you to add to or view their calendars\"); // Creates a new instance of Label with the given text and assigns it to the popupLabel variable\r\n                    popupLabel.setTextAlignment(TextAlignment.CENTER); // Sets the text alignment of the popupLabel to center\r\n                    popupLabel.setWrapText(true); // Enables text wrapping for the popupLabel\r\n                    final UUID managerLinkingCode = UUID.randomUUID(); // Generates a new random UUID and assigns it to the managerLinkingCode variable\r\n                    Label linkingCodeLabel = new Label(managerLinkingCode.toString()); // Creates a new instance of Label with the string representation of managerLinkingCode and assigns it to the linkingCodeLabel variable\r\n                    Button okButton = new Button(\"OK\"); // Creates a new instance of Button with the text \"OK\" and assigns it to the okButton variable\r\n                    okButton.setOnAction(e -> { // Sets an event handler for the okButton\r\n                        popupStage.close(); // Closes the popupStage\r\n                        //linkingCode = Optional.ofNullable(managerLinkingCode);\r\n                        UserDetails userDetails = new UserDetails(userId, name, email, password, selectedAccountType, Optional.ofNullable(managerLinkingCode)); //linkingCode);\r\n                        userDetailsMap.put(userId, userDetails); // Adds the newly created UserDetails object to the userDetailsMap with the userId as the key\r\n                        showAlert(\"Sign up successful.\"); // Displays an alert with the message \"Sign up successful.\"\r\n                        showLoginScreen(); // Calls the showLoginScreen method to display the login screen\r\n                        saveUserData(); // Calls the saveUserData method to save user data to a file\r\n                    });\r\n                    popupVBox.getChildren().addAll(popupLabel, linkingCodeLabel, okButton); // Adds the popupLabel, linkingCodeLabel, and okButton to the popupVBox\r\n                    Scene popupScene = new Scene(popupVBox); // Creates a new instance of Scene with the popupVBox as the root node and assigns it to the popupScene variable\r\n                    popupStage.setScene(popupScene); // Sets the scene of the popupStage to the popupScene\r\n                    popupStage.showAndWait(); // Displays the popupStage and waits for it to be closed\r\n                } else if (selectedAccountType.equals(\"Employee\")) { // Checks if the selected account type is \"Employee\"\r\n                    // Create a popup for Employee account type\r\n                    Stage popupStage = new Stage(); // Creates a new instance of Stage and assigns it to the popupStage variable\r\n                    VBox popupVBox = new VBox(); // Creates a new instance of VBox and assigns it to the popupVBox variable\r\n                    popupVBox.setAlignment(Pos.CENTER); // Aligns the contents of the popupVBox to the center\r\n                    popupVBox.setSpacing(10); // Sets the spacing between children of the popupVBox to 10\r\n                    Label popupLabel = new Label(\"Do you have a linking code to a manager?\"); // Creates a new instance of Label with the text \"Do you have a linking code to a manager?\" and assigns it to the popupLabel variable\r\n                    Button yesButton = new Button(\"Yes\"); // Creates a new instance of Button with the text \"Yes\" and assigns it to the yesButton variable\r\n                    Button noButton = new Button(\"No\"); // Creates a new instance of Button with the text \"No\" and assigns it to the noButton variable\r\n                    yesButton.setOnAction(event2 -> { // Sets an event handler for the yesButton\r\n                        // Create a new popup for entering the linking code\r\n                        Stage linkingCodeStage = new Stage(); // Creates a new instance of Stage and assigns it to the linkingCodeStage variable\r\n                        VBox linkingCodeVBox = new VBox(); // Creates a new instance of VBox and assigns it to the linkingCodeVBox variable\r\n                        linkingCodeVBox.setAlignment(Pos.CENTER); // Aligns the contents of the linkingCodeVBox to the center\r\n                        linkingCodeVBox.setSpacing(10); // Sets the spacing between children of the linkingCodeVBox to 10\r\n                        Label linkingCodeLabel = new Label(\"Enter the manager's linking code:\"); // Creates a new instance of Label with the text \"Enter the manager's linking code:\" and assigns it to the linkingCodeLabel variable\r\n                        TextField linkingCodeField = new TextField(); // Creates a new instance of TextField and assigns it to the linkingCodeField variable\r\n                        Button submitButton = new Button(\"Submit\"); // Creates a new instance of Button with the text \"Submit\" and assigns it to the submitButton variable\r\n                        Button cancelPopUpButton = new Button(\"Cancel\"); // Creates a new instance of Button with the text \"Cancel\" and assigns it to the cancelPopUpButton variable\r\n                        submitButton.setOnAction(event3 -> { // Sets an event handler for the submitButton\r\n                            String linkingCodeString = linkingCodeField.getText(); // Gets the text from the linkingCodeField and assigns it to the linkingCodeString variable\r\n                            UUID managerLinkingCode = null; // Declares a variable managerLinkingCode and initializes it with null\r\n                            try {\r\n                                managerLinkingCode = UUID.fromString(linkingCodeString); // Attempts to create a UUID from the linkingCodeString and assigns it to the managerLinkingCode variable\r\n                                boolean isValidLinkingCode = isValidLinkingCode(linkingCodeString); // Calls the isValidLinkingCode method with the linkingCodeString and assigns the result to the isValidLinkingCode variable\r\n                                if (!isValidLinkingCode) { // Checks if the linking code is invalid\r\n                                    showAlert(\"Invalid linking code.\"); // Displays an alert with the message \"Invalid linking code.\"\r\n                                    return; // Exit the method if the code is invalid\r\n                                }\r\n                            } catch (IllegalArgumentException e) {\r\n                                showAlert(\"Invalid linking code.\"); // Displays an alert with the message \"Invalid linking code.\"\r\n                                return;\r\n                            }\r\n                            linkingCodeStage.close(); // Closes the linkingCodeStage\r\n                            UserDetails userDetails = new UserDetails(userId, name, email, password, selectedAccountType, Optional.ofNullable(managerLinkingCode));\r\n                            userDetailsMap.put(userId, userDetails); // Adds the newly created UserDetails object to the userDetailsMap with the userId as the key\r\n                            saveUserData(); // Calls the saveUserData method to save user data to a file\r\n                            popupStage.close(); // Closes the popupStage\r\n                            showAlert(\"Sign up successful.\"); // Displays an alert with the message \"Sign up successful.\"\r\n                            showLoginScreen(); // Calls the showLoginScreen method to display the login screen\r\n                        });\r\n                        cancelPopUpButton.setOnAction(event3 -> { // Sets an event handler for the cancelPopUpButton\r\n                            linkingCodeStage.close(); // Closes the linkingCodeStage\r\n                        });\r\n                        linkingCodeVBox.getChildren().addAll(linkingCodeLabel, linkingCodeField, submitButton, cancelPopUpButton); // Adds the linkingCodeLabel, linkingCodeField, submitButton, and cancelPopUpButton to the linkingCodeVBox\r\n                        Scene linkingCodeScene = new Scene(linkingCodeVBox); // Creates a new instance of Scene with the linkingCodeVBox as the root node and assigns it to the linkingCodeScene variable\r\n                        linkingCodeStage.setScene(linkingCodeScene); // Sets the scene of the linkingCodeStage to the linkingCodeScene\r\n                        linkingCodeStage.showAndWait(); // Displays the linkingCodeStage and waits for it to be closed\r\n                    });\r\n                    noButton.setOnAction(event2 -> { // Sets an event handler for the noButton\r\n                        UserDetails userDetails = new UserDetails(userId, name, email, password, selectedAccountType, linkingCode);\r\n                        userDetailsMap.put(userId, userDetails); // Adds the newly created UserDetails object to the userDetailsMap with the userId as the key\r\n                        showAlert(\"Sign up successful.\"); // Displays an alert with the message \"Sign up successful.\"\r\n                        popupStage.close(); // Closes the popupStage\r\n                        showLoginScreen(); // Calls the showLoginScreen method to display the login screen\r\n                        saveUserData(); // Calls the saveUserData method to save user data to a file\r\n                    });\r\n                    popupVBox.getChildren().addAll(popupLabel, yesButton, noButton); // Adds the popupLabel, yesButton, and noButton to the popupVBox\r\n                    Scene popupScene = new Scene(popupVBox); // Creates a new instance of Scene with the popupVBox as the root node and assigns it to the popupScene variable\r\n                    popupStage.setScene(popupScene); // Sets the scene of the popupStage to the popupScene\r\n                    popupStage.showAndWait(); // Displays the popupStage and waits for it to be closed\r\n                } else { // If the selected account type is neither \"Manager\" nor \"Employee\" (implicitly \"Personal\")\r\n                    UserDetails userDetails = new UserDetails(userId, name, email, password, selectedAccountType, linkingCode);\r\n                    userDetailsMap.put(userId, userDetails); // Adds the newly created UserDetails object to the userDetailsMap with the userId as the key\r\n                    showAlert(\"Sign up successful.\"); // Displays an alert with the message \"Sign up successful.\"\r\n                    showLoginScreen(); // Calls the showLoginScreen method to display the login screen\r\n                    saveUserData(); // Calls the saveUserData method to save user data to a file\r\n                }\r\n            }\r\n        });\r\n        signUpBox.getChildren().addAll(questionLabel, accountTypeLabel, accountTypeBox, formBox, buttonsBox); // Adds the questionLabel, accountTypeLabel, accountTypeBox, formBox, and buttonsBox to the signUpBox\r\n        signUpPane.setCenter(signUpBox); // Sets the center of the signUpPane to the signUpBox\r\n        rootPane.getChildren().setAll(signUpPane); // Sets the contents of the rootPane to the signUpPane\r\n    }\r\n\r\n    private void showProfileEditScreen() { // This method shows the profile edit screen\r\n        BorderPane updatePane = new BorderPane(); // Create a new BorderPane to hold the UI elements\r\n        ImageView imageView = new ImageView(); // Create an ImageView for displaying the user's profile picture\r\n        imageView.setFitWidth(200); // Set the width of the image to 200 pixels\r\n        imageView.setFitHeight(150); // Set the height of the image to 150 pixels\r\n        imageView.setPreserveRatio(true); // Preserve the aspect ratio of the image\r\n        imageView.setSmooth(true); // Enable smooth rendering of the image\r\n        imageView.setCache(true); // Cache the image for better performance\r\n        imageView.setImage(image); // Set the image to display in the ImageView\r\n        updatePane.setTop(imageView); // Set the ImageView at the top of the BorderPane\r\n        BorderPane.setAlignment(imageView, Pos.TOP_CENTER); // Center the ImageView at the top\r\n        VBox updateBox = new VBox(10); // Create a VBox to hold the form elements\r\n        updateBox.setPadding(new Insets(0, 10, 50, 10)); // Set padding for the VBox\r\n        updateBox.setAlignment(Pos.CENTER); // Center the contents of the VBox\r\n        Label accountSettingsLabel = new Label(\"Account Settings\"); // Create a label for account settings\r\n        accountSettingsLabel.setFont(new Font(30)); // Set the font size for the label\r\n        Label companyCodeDescriptionLabel = new Label(); // Create a label to display the company code description\r\n        // Set the description label text based on the user's account type and linking code\r\n        if (loggedInUser.getLinkingCode() == null || loggedInUser.getLinkingCode().isEmpty()) {\r\n            companyCodeDescriptionLabel.setText(\"Add company code below:\");\r\n        } else if (Objects.equals(loggedInUser.getAccountType(), \"Manager\")) {\r\n            companyCodeDescriptionLabel.setText(\"Company code below:\");\r\n        } else {\r\n            companyCodeDescriptionLabel.setText(\"Modify company code below:\");\r\n        }\r\n        accountSettingsLabel.setFont(new Font(15)); // Set the font size for the description label\r\n        Label companyCodeLabel = new Label(\"Company Code:\"); // Create a label for the company code\r\n        TextField companyCodeField = new TextField(); // Create a text field for the company code\r\n        Optional<UUID> linkingCode = loggedInUser.getLinkingCode(); // Get the linking code of the logged-in user\r\n        // Set the text in the company code field based on the user's linking code\r\n        if (loggedInUser.getLinkingCode() == null || loggedInUser.getLinkingCode().isEmpty()) {\r\n            companyCodeField.setText(\"\");\r\n        } else {\r\n            companyCodeField.setText(linkingCode.isPresent() ? linkingCode.get().toString() : \"\");\r\n        }\r\n        // Set the editable property of the company code field based on the user's account type\r\n        if (Objects.equals(loggedInUser.getAccountType(), \"Employee\")) {\r\n            companyCodeField.setEditable(true);\r\n        } else {\r\n            companyCodeField.setEditable(false);\r\n        }\r\n        HBox companyBox = new HBox(10); // Create an HBox to hold the company code label and text field\r\n        companyBox.getChildren().addAll(companyCodeLabel, companyCodeField); // Add the label and text field to the HBox\r\n        companyBox.setAlignment(Pos.CENTER); // Center the contents of the HBox\r\n        Label updateDetailsLabel = new Label(\"Update your details below:\"); // Create a label for updating user details\r\n        updateDetailsLabel.setFont(new Font(15)); // Set the font size for the label\r\n        VBox formBox = new VBox(5); // Create a VBox to hold the form fields\r\n        Label nameLabel = new Label(\"Name\"); // Create a label for the name field\r\n        TextField nameField = new TextField(); // Create a text field for the name\r\n        nameField.setText(loggedInUser.getName()); // Set the text in the name field with the logged-in user's name\r\n        Label emailLabel = new Label(\"Email\"); // Create a label for the email field\r\n        TextField emailField = new TextField(); // Create a text field for the email\r\n        emailField.setText(loggedInUser.getEmail()); // Set the text in the email field with the logged-in user's email\r\n        Label passwordLabel = new Label(\"Password\"); // Create a label for the password field\r\n        TextField passwordField = new TextField(); // Create a text field for the password\r\n        passwordField.setText(loggedInUser.getPassword()); // Set the text in the password field with the logged-in user's password\r\n        // Add the form fields to the formBox\r\n        formBox.getChildren().addAll(nameLabel, nameField, emailLabel, emailField, passwordLabel, passwordField);\r\n        formBox.setAlignment(Pos.CENTER_LEFT); // Align the form fields to the center-left\r\n        \r\n        HBox buttonsBox = new HBox(10); // Create an HBox to hold the update and cancel buttons\r\n        buttonsBox.setAlignment(Pos.CENTER); // Center the contents of the buttonsBox\r\n        Button updateButton = new Button(\"UPDATE\"); // Create an update button\r\n        Button cancelButton = new Button(\"CANCEL\"); // Create a cancel button\r\n        cancelButton.setOnAction(event -> showHomePage()); // Set the action for the cancel button to show the home page\r\n        buttonsBox.getChildren().addAll(updateButton, cancelButton); // Add the buttons to the buttonsBox\r\n        updateButton.setOnAction(event -> {\r\n            String name = nameField.getText(); // Get the name from the name field\r\n            String email = emailField.getText(); // Get the email from the email field\r\n            String password = passwordField.getText(); // Get the password from the password field\r\n            boolean isValidUUID = isValidUUID(companyCodeField.getText()); // Check if the company code is a valid UUID\r\n            if (!companyCodeField.getText().isEmpty() && !isValidUUID) {\r\n                showAlert(\"Not valid linking code\"); // Show an alert if the linking code is not a valid UUID\r\n                return;\r\n            } else if (isEmailRegistered(email) && !Objects.equals(email, loggedInUser.getEmail())) {\r\n                showAlert(\"Email already exists.\"); // Show an alert if the email is already registered and not the same as the logged-in user's email\r\n                return;\r\n            }\r\n            UserDetails updatedUserDetails;\r\n            if (Objects.equals(loggedInUser.getAccountType(), \"Employee\")) {\r\n                String companyCode = companyCodeField.getText(); // Get the company code from the text field\r\n                boolean isValidLinkingCode = isValidLinkingCode(companyCode); // Validate the linking code against manager profiles\r\n                if (!isValidLinkingCode) {\r\n                    showAlert(\"Invalid linking code.\"); // Show an alert if the linking code is invalid\r\n                    return; // Exit the method if the code is invalid\r\n                }\r\n                Optional<UUID> linkingCodeOptional;\r\n                if (companyCodeField.getText().isEmpty()) {\r\n                    linkingCodeOptional = Optional.empty(); // If the company code field is empty, create an empty Optional\r\n                } else {\r\n                    try {\r\n                        UUID linkingCodeUUID = UUID.fromString(companyCodeField.getText()); // Convert the company code string to a UUID\r\n                        linkingCodeOptional = Optional.of(linkingCodeUUID); // Create an Optional with the UUID\r\n                    } catch (IllegalArgumentException e) {\r\n                        // Invalid UUID format\r\n                        linkingCodeOptional = loggedInUser.getLinkingCode(); // Use the existing linking code if the format is invalid\r\n                    }\r\n                }\r\n                // Create a new UserDetails object with the updated information\r\n                updatedUserDetails = new UserDetails(loggedInUser.uuid, name, email, password, loggedInUser.getAccountType(), linkingCodeOptional);\r\n            } else {\r\n                // For non-employee accounts, create a new UserDetails object without changing the linking code\r\n                updatedUserDetails = new UserDetails(loggedInUser.uuid, name, email, password, loggedInUser.getAccountType(), loggedInUser.getLinkingCode());\r\n            }\r\n            userDetailsMap.put(loggedInUser.uuid, updatedUserDetails); // Update the user details in the map\r\n            loggedInUser = updatedUserDetails; // Update the logged-in user with the new user details\r\n            showAlert(\"Details updated successfully.\"); // Show an alert indicating that the details were updated successfully\r\n            saveUserData(); // Save the updated user data\r\n        });\r\n        if (Objects.equals(loggedInUser.getAccountType(), \"Personal\")) {\r\n            // If the user is a personal account, only show the account settings, update details, form, and buttons\r\n            updateBox.getChildren().addAll(accountSettingsLabel, updateDetailsLabel, formBox, buttonsBox);\r\n        } else {\r\n            // For other account types, also show the company code description and company code fields\r\n            updateBox.getChildren().addAll(accountSettingsLabel, companyCodeDescriptionLabel, companyBox, updateDetailsLabel, formBox, buttonsBox);\r\n        }\r\n        updatePane.setCenter(updateBox); // Set the updateBox in the center of the BorderPane\r\n        rootPane.getChildren().setAll(updatePane); // Set the updatePane as the content of the rootPane\r\n    }\r\n\r\n    private void showCalendarScreen() {\r\n        BorderPane calendarPane = new BorderPane(); //initialise the calendar pane\r\n\r\n        // Create a VBox for the button\r\n        VBox buttonBox = new VBox(10);\r\n        buttonBox.setAlignment(Pos.CENTER);\r\n\r\n        /**\r\n        This is code for the 'menu bar' at the top of the screen.\r\n        */\r\n        // Create a Rectangle for the top partition\r\n        Rectangle topPartition = new Rectangle();\r\n        // Set the fill color of the Rectangle to a very light grey using a hex color code\r\n        topPartition.setFill(Color.web(\"#e9e9e9\"));\r\n        // Set the stroke color of the Rectangle to grey using a hex color code\r\n        topPartition.setStroke(Color.web(\"#b3b3b3\"));\r\n        // Set the width of the Rectangle to the width of the BorderPane\r\n        topPartition.widthProperty().bind(calendarPane.widthProperty());\r\n        // Set the height of the Rectangle to 5% of the height of the BorderPane\r\n        topPartition.heightProperty().bind(calendarPane.heightProperty().multiply(0.05));\r\n        // Add the Rectangle to the top of the BorderPane\r\n        calendarPane.setTop(topPartition);\r\n\r\n        // Create the \"Back\" button\r\n        Button backButton = new Button(\"Back\");\r\n        backButton.setOnAction(event -> showHomePage());\r\n        // Create the \"Profile button\r\n        Button profileButton = new Button(\"Profile\");\r\n        profileButton.setOnAction(event -> showProfileEditScreen());\r\n        // Create the \"Settings\" button\r\n        Button settingsButton = new Button(\"Settings\");\r\n        // Create the \"Add Event\" button\r\n        Button addEventButton = new Button(\"Add Event\");\r\n        addEventButton.setOnAction(event -> showAddEvent());\r\n\r\n        // Create a StackPane to hold the rectangle and the buttons\r\n        StackPane headerStackPane = new StackPane();\r\n        headerStackPane.getChildren().addAll(topPartition, backButton, new Pane(), addEventButton, new Pane(), settingsButton, new Pane(), profileButton);\r\n\r\n        // Set the alignment of the buttons within the StackPane\r\n        StackPane.setAlignment(backButton, Pos.CENTER_LEFT);\r\n        StackPane.setAlignment(settingsButton, Pos.CENTER_RIGHT);\r\n        StackPane.setAlignment(profileButton, Pos.CENTER_RIGHT);\r\n        StackPane.setAlignment(addEventButton, Pos.CENTER);\r\n        // Create an HBox to hold the StackPane\r\n        HBox header = new HBox();\r\n        header.getChildren().addAll(new Pane(), headerStackPane);\r\n        HBox.setHgrow(header.getChildren().get(1), Priority.ALWAYS); // Make the Pane grow to push the StackPane to the right\r\n        // Add the HBox to the top of the BorderPane\r\n        calendarPane.setTop(header);\r\n\r\n        /**\r\n         * This is code for the left column\r\n         */\r\n        //Create rectangle for sidebar\r\n        Rectangle sideBar = new Rectangle();\r\n        // Set the fill color of the Rectangle to a very light grey using a hex color code\r\n        sideBar.setFill(Color.web(\"#e9e9e9\"));\r\n        // Set the stroke color of the Rectangle to grey using a hex color code\r\n        sideBar.setStroke(Color.web(\"#b3b3b3\"));\r\n        // Set the width of the Rectangle to the 20% of the width of the BorderPane\r\n        sideBar.widthProperty().bind(calendarPane.widthProperty().multiply(0.20));\r\n        // Set the height of the Rectangle to 95% of the height of the BorderPane, to account for the header bar\r\n        sideBar.heightProperty().bind(calendarPane.heightProperty().multiply(0.95));\r\n        //Add the rectangle to the left of the BorderPane\r\n        calendarPane.setLeft(sideBar);\r\n\r\n        /**\r\n         * This is code for the calendar segment.\r\n         */\r\n        // Calendar Grid\r\n        TableView<String[]> calendarGrid = new TableView<>();\r\n        calendarGrid.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY); // Ensure columns fill the available width\r\n\r\n        // Add the \"Time\" column\r\n        TableColumn<String[], String> timeColumn = new TableColumn<>(\"Time\");\r\n        timeColumn.setCellValueFactory(cellData -> new SimpleStringProperty(String.valueOf(cellData.getValue()[0])));\r\n        timeColumn.setPrefWidth(70); // Adjust the width as needed\r\n        calendarGrid.getColumns().add(timeColumn);\r\n\r\n        // Add columns for each day of the week\r\n        String[] daysOfWeek = {\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"};\r\n        TableColumn<String[], String>[] columns = new TableColumn[daysOfWeek.length]; // Array to hold columns\r\n        for (int i = 0; i < daysOfWeek.length; i++) {\r\n            TableColumn<String[], String> column = new TableColumn<>(daysOfWeek[i]);\r\n            final int index = i + 1; // Increment by 1 to skip the \"Time\" column\r\n            column.setCellValueFactory(cellData -> new SimpleStringProperty(cellData.getValue()[index]));\r\n            column.setPrefWidth(TableView.USE_COMPUTED_SIZE); // Let the column size adjust to fit content\r\n            columns[i] = column; // Assign column to array\r\n        }\r\n        calendarGrid.getColumns().addAll(columns); // Add columns to TableView\r\n\r\n        // Add rows for each hour of the day\r\n        for (int hour = 0; hour < 24; hour++) {\r\n            String[] row = new String[8]; // 8 columns (including the \"Time\" column)\r\n            // Adjust time to display 00:00 - 23:00\r\n            row[0] = String.format(\"%02d:00\", hour);\r\n            for (int day = 1; day < 8; day++) {\r\n                row[day] = \"\"; // Placeholder for event information (to be implemented later)\r\n            }\r\n            calendarGrid.getItems().add(row);\r\n        }\r\n\r\n        // Limit the number of rows to 25\r\n        calendarGrid.setFixedCellSize(25); // Set the height of each row\r\n        calendarGrid.prefHeightProperty().bind(calendarGrid.fixedCellSizeProperty().multiply(25)); // Set the TableView's height\r\n\r\n        // Add calendar grid to center of the BorderPane\r\n        calendarPane.setCenter(calendarGrid);\r\n\r\n        /**\r\n         * This is code for the creation of the window\r\n         */\r\n        // Create a scene with the BorderPane\r\n        Scene scene = new Scene(calendarPane, 1280, 720);\r\n        // Set the scene on the stage\r\n        primaryStage.setScene(scene);\r\n        // Show the stage\r\n        primaryStage.show();\r\n    }\r\n\r\n    private void showAddEvent() {\r\n        // Create a new stage for the pop-up window\r\n        Stage addEventStage = new Stage();\r\n        addEventStage.setTitle(\"Add Event\");\r\n\r\n        // Create the layout for the pop-up window\r\n        GridPane layout = new GridPane();\r\n        layout.setAlignment(Pos.CENTER);\r\n        layout.setHgap(10);\r\n        layout.setVgap(10);\r\n\r\n        // Labels for the fields\r\n        Label titleLabel = new Label(\"Title:\");\r\n        Label typeLabel = new Label(\"Type:\");\r\n        Label dateLabel = new Label(\"Date:\");\r\n        Label timeFromLabel = new Label(\"Time From:\");\r\n        Label timeToLabel = new Label(\"Time To:\");\r\n        Label descriptionLabel = new Label(\"Description:\");\r\n\r\n        // TextFields and ComboBox for user input\r\n        TextField titleField = new TextField();\r\n        ComboBox<String> typeComboBox = new ComboBox<>();\r\n        typeComboBox.getItems().addAll(\"Meeting\", \"Reminder\");\r\n        DatePicker datePicker = new DatePicker();\r\n        TextArea descriptionArea = new TextArea();\r\n        ComboBox<String> timeFromComboBox = new ComboBox<>();\r\n        ComboBox<String> timeToComboBox = new ComboBox<>();\r\n\r\n        // Populate time ComboBoxes\r\n        for (int hour = 0; hour < 24; hour++) {\r\n            String hourString = String.format(\"%02d:00\", hour);\r\n            timeFromComboBox.getItems().add(hourString);\r\n            timeToComboBox.getItems().add(hourString);\r\n        }\r\n\r\n        // Convert selected time from ComboBox to LocalTime\r\n        String selectedFromTime = timeFromComboBox.getValue();\r\n        String selectedToTime = timeToComboBox.getValue();\r\n\r\n        // Add components to the layout\r\n        layout.add(titleLabel, 0, 0);\r\n        layout.add(titleField, 1, 0);\r\n        layout.add(typeLabel, 0, 1);\r\n        layout.add(typeComboBox, 1, 1);\r\n        layout.add(dateLabel, 0, 2);\r\n        layout.add(datePicker, 1, 2);\r\n        layout.add(timeFromLabel, 0, 3);\r\n        layout.add(timeFromComboBox, 1, 3);\r\n        layout.add(timeToLabel, 0, 4);\r\n        layout.add(timeToComboBox, 1, 4);\r\n        layout.add(descriptionLabel, 0, 5);\r\n        layout.add(descriptionArea, 1, 5);\r\n\r\n        Button addButton = new Button(\"Add\");\r\n        addButton.setOnAction(event -> {\r\n            final UUID eventId = UUID.randomUUID(); // Generates a new random UUID and assigns it to the eventId variable\r\n            if (Objects.equals(loggedInUser.accountType, \"Personal\")) {\r\n                CalendarDetails calendarDetails = new CalendarDetails(eventId, titleField.toString(), typeComboBox.toString(), descriptionArea.toString(), datePicker, selectedFromTime, selectedToTime, Optional.ofNullable(loggedInUser.uuid));\r\n                calendarDetailsMap.put(Optional.ofNullable(loggedInUser.uuid), calendarDetails); // Adds the newly created calendarDetails object to the calendarDetailsMap with the // userId as the key\r\n            }   else {\r\n                CalendarDetails calendarDetails = new CalendarDetails(eventId, titleField.toString(), typeComboBox.toString(), descriptionArea.toString(), datePicker, selectedFromTime, selectedToTime, loggedInUser.linkingCode);\r\n                calendarDetailsMap.put(loggedInUser.linkingCode, calendarDetails); // Adds the newly created calendarDetails object to the calendarDetailsMap with the // userId as the key\r\n            }\r\n            showAlert(\"Calendar event created.\"); // Displays an alert with the message \"Calendar event created.\"\r\n            addEventStage.close();\r\n            saveCalendarData(); // Calls the saveCalendarData method to save calendar data to a file\r\n            });\r\n      //      }\r\n      //  }\r\n\r\n        // Add the button to the layout\r\n        layout.add(addButton, 1, 6);\r\n\r\n        // Create a scene with the layout\r\n        Scene scene = new Scene(layout, 600, 500);\r\n\r\n        // Set the scene on the stage and show the stage\r\n        addEventStage.setScene(scene);\r\n        addEventStage.show();\r\n    }\r\n\r\n    private boolean isValidLinkingCode(String linkingCode) { // Defines a private method to check if a linking code is valid\r\n        // Iterate over userDetailsMap to find manager profiles\r\n        for (UserDetails userDetails : userDetailsMap.values()) { // Iterates over the values in the userDetailsMap\r\n            if (Objects.equals(userDetails.getAccountType(), \"Manager\")) { // Checks if the current UserDetails object is of type \"Manager\"\r\n                Optional<UUID> managerLinkingCode = userDetails.getLinkingCode(); // Gets the linking code of the manager\r\n                if (managerLinkingCode.isPresent() && managerLinkingCode.get().toString().equals(linkingCode)) { // Checks if the manager's linking code matches the provided linking code\r\n                    return true; // Valid linking code found\r\n                }\r\n            }\r\n        }\r\n        return false; // No matching linking code found\r\n    }\r\n\r\n    private boolean isEmailRegistered(String email) { // Defines a private method to check if an email is already registered\r\n        // Iterate over userDetailsMap to check if email is already registered\r\n        for (UserDetails userDetails : userDetailsMap.values()) { // Iterates over the values in the userDetailsMap\r\n            if (userDetails.getEmail().equals(email)) { // Checks if the email of the current UserDetails object matches the provided email\r\n                return true; // Email already registered\r\n            }\r\n        }\r\n        return false; // Email not registered\r\n    }\r\n\r\n    private void loadUserData() { // This method loads user data from a file named \"userData.dat\" located in the \"src/main/resources\" directory\r\n        File file = new File(\"src/main/resources/userData.dat\"); // Create a File object for the \"userData.dat\" file\r\n        if (file.exists() && file.length() > 0) { // Check if the file exists and has a non-zero length\r\n            try {\r\n                FileInputStream fileIn = new FileInputStream(file); // Create a FileInputStream to read from the file\r\n                ObjectInputStream objectIn = new ObjectInputStream(fileIn); // Create an ObjectInputStream to read objects from the FileInputStream\r\n                userDetailsMap = (HashMap<UUID, UserDetails>) objectIn.readObject(); // Read the userDetailsMap object from the file and cast it to a HashMap<UUID, UserDetails>\r\n                objectIn.close(); // Close the input streams\r\n                fileIn.close(); // Close the input streams\r\n            } catch (IOException | ClassNotFoundException e) {\r\n                e.printStackTrace(); // If an exception occurs during reading, print the stack trace\r\n            }\r\n        } else {\r\n            userDetailsMap = new HashMap<>(); // If the file does not exist or is empty, create a new empty HashMap for userDetailsMap\r\n        }\r\n    }\r\n\r\n    private void saveUserData() { // This method saves the userDetailsMap to the \"userData.dat\" file\r\n        try {\r\n            FileOutputStream fileOut = new FileOutputStream(\"src/main/resources/userData.dat\"); // Create a FileOutputStream to write to the \"userData.dat\" file\r\n            ObjectOutputStream objectOut = new ObjectOutputStream(fileOut); // Create an ObjectOutputStream to write objects to the FileOutputStream\r\n            objectOut.writeObject(userDetailsMap); // Write the userDetailsMap object to the file\r\n            objectOut.close(); // Close the output streams\r\n            fileOut.close(); // Close the output streams\r\n        } catch (Exception e) {\r\n            e.printStackTrace(); // If an exception occurs during writing, print the stack trace\r\n        }\r\n    }\r\n\r\n    private static boolean isValidUUID(String str) { // This method checks if a given string is a valid UUID (Universally Unique Identifier)\r\n        try {\r\n            UUID uuid = UUID.fromString(str); // Attempt to create a UUID object from the input string using the correct method\r\n            return true; // If no exception is thrown, the string is a valid UUID\r\n        } catch (IllegalArgumentException e) {\r\n            return false; // If an exception is thrown, the string is not a valid UUID\r\n        }\r\n    }\r\n\r\n    private boolean authenticateUser(String email, String password) { // Defines a private method to authenticate a user\r\n        for (UserDetails userDetails : userDetailsMap.values()) { // Iterates over the values in the userDetailsMap\r\n            if (userDetails.getEmail().equalsIgnoreCase(email) && userDetails.getPassword().equals(password)) { // Checks if the email and password match the current UserDetails object, ignoring case sensitivity on email field\r\n                loggedInUser = userDetails; // Updates the loggedInUser instance variable with the authenticated user's details\r\n                return true; // User authenticated successfully\r\n            }\r\n        }\r\n        return false; // User authentication failed\r\n    }\r\n\r\n    private void showAlert(String message) { // Defines a private method to display an alert\r\n        Alert alert = new Alert(Alert.AlertType.INFORMATION); // Creates a new instance of Alert with the type INFORMATION\r\n        alert.setTitle(\"Information\"); // Sets the title of the alert to \"Information\"\r\n        alert.setHeaderText(null); // Sets the header text of the alert to null (no header text)\r\n        alert.setContentText(message); // Sets the content text of the alert to the provided message\r\n        alert.showAndWait(); // Displays the alert and waits for it to be closed\r\n    }\r\n\r\n    private static class UserDetails implements Serializable { // Defines a private static nested class UserDetails that implements the Serializable interface\r\n        private final UUID uuid; // Declares a final instance variable uuid of type UUID\r\n        private final String name; // Declares a final instance variable name of type String\r\n        private final String email; // Declares a final instance variable email of type String\r\n        private final String password; // Declares a final instance variable password of type String\r\n        private final String accountType; // Declares a final instance variable accountType of type String\r\n        private transient Optional<UUID> linkingCode; // Declares a transient instance variable linkingCode of type Optional<UUID>\r\n        private static final long serialVersionUID = 1L; // Declares a static final serialVersionUID field required for Serializable classes\r\n\r\n        public UserDetails (UUID uuid, String name, String email, String password, String accountType, Optional<UUID> linkingCode) { // Defines a constructor that takes parameters for all instance variables\r\n            this.uuid = uuid; // Initializes the uuid instance variable\r\n            this.name = name; // Initializes the name instance variable\r\n            this.email = email; // Initializes the email instance variable\r\n            this.password = password; // Initializes the password instance variable\r\n            this.accountType = accountType; // Initializes the accountType instance variable\r\n            this.linkingCode = linkingCode; // Initializes the linkingCode instance variable\r\n        }\r\n\r\n        private void writeObject(ObjectOutputStream out) throws IOException { // Defines a private method for custom serialization of the linkingCode field\r\n            out.defaultWriteObject(); // Performs the default serialization for non-transient instance variables\r\n            out.writeBoolean(linkingCode.isPresent()); // Writes a boolean indicating if linkingCode is present\r\n            linkingCode.ifPresent(uuid -> { // Executes the lambda expression if linkingCode is present\r\n                try {\r\n                    out.writeObject(uuid); // Writes the UUID object if present\r\n                } catch (IOException e) {\r\n                    e.printStackTrace(); // Prints the stack trace in case of an IOException\r\n                }\r\n            });\r\n        }\r\n\r\n        private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException { // Defines a private method for custom deserialization of the linkingCode field\r\n            in.defaultReadObject(); // Performs the default deserialization for non-transient instance variables\r\n            boolean isPresent = in.readBoolean(); // Reads a boolean indicating if linkingCode is present\r\n            if (isPresent) {\r\n                linkingCode = Optional.of((UUID) in.readObject()); // Sets linkingCode to the deserialized UUID object if present\r\n            } else {\r\n                linkingCode = Optional.empty(); // Sets linkingCode to an empty Optional if not present\r\n            }\r\n        }\r\n\r\n        public UUID getUuid() { // Defines a public method to get the uuid\r\n            return uuid; // Returns the uuid instance variable\r\n        }\r\n\r\n        public String getName() { // Defines a public method to get the name\r\n            return name; // Returns the name instance variable\r\n        }\r\n\r\n        public String getEmail() { // Defines a public method to get the email\r\n            return email; // Returns the email instance variable\r\n        }\r\n\r\n        public String getPassword() { // Defines a public method to get the password\r\n            return password; // Returns the password instance variable\r\n        }\r\n\r\n        public String getAccountType() { // Defines a public method to get the accountType\r\n            return accountType; // Returns the accountType instance variable\r\n        }\r\n\r\n        public Optional<UUID> getLinkingCode() { // Defines a public method to get the linkingCode\r\n            return linkingCode; // Returns the linkingCode instance variable\r\n        }\r\n    }\r\n\r\n    // Method to load user data from file\r\n    private void loadCalendarData() { // Defines a private method to load calendar data from a file\r\n        File file = new File(\"calendarData.dat\"); // Creates a new instance of File with the filename \"calendarData.dat\"\r\n\r\n        if (file.exists() && file.length() > 0) { // Checks if the file exists and has a non-zero length\r\n            try {\r\n                FileInputStream fileIn = new FileInputStream(file); // Creates a new instance of FileInputStream with the file\r\n                ObjectInputStream objectIn = new ObjectInputStream(fileIn); // Creates a new instance of ObjectInputStream with the FileInputStream\r\n                calendarDetailsMap = (HashMap<Optional<UUID>, CalendarDetails>) objectIn.readObject(); // Reads the calendarDetailsMap object from the ObjectInputStream\r\n                objectIn.close(); // Closes the ObjectInputStream\r\n                fileIn.close(); // Closes the FileInputStream\r\n\r\n            } catch (IOException | ClassNotFoundException e) { // Catches IOException and ClassNotFoundException\r\n                e.printStackTrace(); // Prints the stack trace in case of an exception\r\n            }\r\n        } else {\r\n            //System.out.println(\"calendarData.dat file is empty or does not exist.\");\r\n            calendarDetailsMap = new HashMap<Optional<UUID>, CalendarDetails>(); // Creates a new instance of HashMap and assigns it to the calendarDetailsMap\r\n        }\r\n    }\r\n\r\n    private void saveCalendarData() { // Defines a private method to save calendar data to a file\r\n        try {\r\n            FileOutputStream fileOut = new FileOutputStream(\"calendarData.dat\"); // Creates a new instance of FileOutputStream with the filename \"calendarData.dat\"\r\n            ObjectOutputStream objectOut = new ObjectOutputStream(fileOut); // Creates a new instance of ObjectOutputStream with the FileOutputStream\r\n\r\n            objectOut.writeObject(calendarDetailsMap); // Writes the calendarDetailsMap object to the ObjectOutputStream\r\n            objectOut.close(); // Closes the ObjectOutputStream\r\n            fileOut.close(); // Closes the FileOutputStream\r\n        } catch (Exception e) { // Catches any Exception\r\n            e.printStackTrace(); // Prints the stack trace in case of an exception\r\n        }\r\n    }\r\n\r\n    private static class CalendarDetails implements Serializable { // Defines a private static nested class CalendarDetails that implements the Serializable interface\r\n        private final UUID uuid; // Declares a final instance variable uuid of type UUID\r\n        private final String eventName; // Declares a final instance variable eventName of type String\r\n        private final String eventDescription; // Declares a final instance variable eventDescription of type String\r\n        private final String eventType; // Declares a final instance variable eventType of type String\r\n        private final LocalDateTime eventTimeFrom; // Declares a final instance variable eventTimeFrom of type DateFormat\r\n        private final LocalDateTime eventTimeTo; // Declares a final instance variable eventTimeTo of type DateFormat\r\n        private final DatePicker eventDate; // Declares a final instance variable eventTo of type ZonedDateTime\r\n        private transient Optional<UUID> linkingCode; // Declares a transient instance variable linkingCode of type Optional<UUID>\r\n        private static final long serialVersionUID = 1L; // Declares a static final serialVersionUID field required for Serializable classes\r\n\r\n        public CalendarDetails(UUID uuid, String eventName, String eventType, String eventDescription, DatePicker eventDate, LocalDateTime eventTimeFrom, LocalDateTime eventTimeTo, Optional<UUID> linkingCode) { // Defines a constructor that takes parameters for all instance variables\r\n            this.uuid = uuid; // Initializes the uuid instance variable\r\n            this.eventName = eventName; // Initializes the eventName instance variable\r\n            this.eventType = eventType; // Initializes the eventType instance variable\r\n            this.eventDescription = eventDescription; // Initializes the eventDescription instance variable\r\n            this.eventDate = eventDate;\r\n            this.eventTimeFrom = eventTimeFrom; // Initializes the eventFrom instance variable\r\n            this.eventTimeTo = eventTimeTo; // Initializes the eventTo instance variable\r\n            this.linkingCode = linkingCode; // Initializes the linkingUsers instance variable\r\n        }\r\n\r\n        public UUID getUuid() { // Defines a public method to get the uuid\r\n            return uuid; // Returns the uuid instance variable\r\n        }\r\n\r\n        public String getEventName() { // Defines a public method to get the eventName\r\n            return eventName; // Returns the eventName instance variable\r\n        }\r\n\r\n        public String getEventDescrption() { // Defines a public method to get the eventDescription\r\n            return eventDescription; // Returns the eventDescription instance variable\r\n        }\r\n\r\n        public LocalDateTime getEventFrom() { // Defines a public method to get the eventFrom\r\n            return eventTimeFrom; // Returns the eventTimeFrom instance variable\r\n        }\r\n\r\n        public LocalDateTime getEventTo() { // Defines a public method to get the eventTo\r\n            return eventTimeTo; // Returns the eventTimeTo instance variable\r\n        }\r\n\r\n        public Optional<UUID> getLinkingCode() { // Defines a public method to get the linkingCode\r\n            return linkingCode; // Returns the linkingCode instance variable\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(); // calls for the JavaFx application to launch\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/cab302javaproject/LifestyleCalendar.java b/src/main/java/com/example/cab302javaproject/LifestyleCalendar.java
--- a/src/main/java/com/example/cab302javaproject/LifestyleCalendar.java	(revision 5e28c60f9448424b3458ae5505557f0d8d00f061)
+++ b/src/main/java/com/example/cab302javaproject/LifestyleCalendar.java	(date 1714398943524)
@@ -45,6 +45,8 @@
 import java.time.LocalDateTime;
 import java.util.UUID;
 import java.text.DateFormat;
+import java.time.format.DateTimeFormatter;
+
 
 
 /**
@@ -587,10 +589,17 @@
             timeToComboBox.getItems().add(hourString);
         }
 
+        /**
         // Convert selected time from ComboBox to LocalTime
         String selectedFromTime = timeFromComboBox.getValue();
         String selectedToTime = timeToComboBox.getValue();
 
+<<<<<<< HEAD
+=======
+        LocalDateTime timeFrom = LocalDateTime.parse(selectedFromTime);
+        LocalDateTime timeTo = LocalDateTime.parse(selectedToTime); */
+
+>>>>>>> 57768bd0bb21c8872bcf9f3bef6d1603b2d78f21
         // Add components to the layout
         layout.add(titleLabel, 0, 0);
         layout.add(titleField, 1, 0);
@@ -607,6 +616,11 @@
 
         Button addButton = new Button("Add");
         addButton.setOnAction(event -> {
+            String selectedFromTime = timeFromComboBox.getValue();
+            String selectedToTime = timeToComboBox.getValue();
+            LocalTime timeFrom = LocalTime.parse(selectedFromTime, DateTimeFormatter.ofPattern("HH:mm"));
+            LocalTime timeTo = LocalTime.parse(selectedToTime, DateTimeFormatter.ofPattern("HH:mm"));
+
             final UUID eventId = UUID.randomUUID(); // Generates a new random UUID and assigns it to the eventId variable
             if (Objects.equals(loggedInUser.accountType, "Personal")) {
                 CalendarDetails calendarDetails = new CalendarDetails(eventId, titleField.toString(), typeComboBox.toString(), descriptionArea.toString(), datePicker, selectedFromTime, selectedToTime, Optional.ofNullable(loggedInUser.uuid));
@@ -816,13 +830,13 @@
         private final String eventName; // Declares a final instance variable eventName of type String
         private final String eventDescription; // Declares a final instance variable eventDescription of type String
         private final String eventType; // Declares a final instance variable eventType of type String
-        private final LocalDateTime eventTimeFrom; // Declares a final instance variable eventTimeFrom of type DateFormat
-        private final LocalDateTime eventTimeTo; // Declares a final instance variable eventTimeTo of type DateFormat
+        private final LocalTime eventTimeFrom; // Declares a final instance variable eventTimeFrom of type DateFormat
+        private final LocalTime eventTimeTo; // Declares a final instance variable eventTimeTo of type DateFormat
         private final DatePicker eventDate; // Declares a final instance variable eventTo of type ZonedDateTime
         private transient Optional<UUID> linkingCode; // Declares a transient instance variable linkingCode of type Optional<UUID>
         private static final long serialVersionUID = 1L; // Declares a static final serialVersionUID field required for Serializable classes
 
-        public CalendarDetails(UUID uuid, String eventName, String eventType, String eventDescription, DatePicker eventDate, LocalDateTime eventTimeFrom, LocalDateTime eventTimeTo, Optional<UUID> linkingCode) { // Defines a constructor that takes parameters for all instance variables
+        public CalendarDetails(UUID uuid, String eventName, String eventType, String eventDescription, DatePicker eventDate, LocalTime eventTimeFrom, LocalTime eventTimeTo, Optional<UUID> linkingCode) { // Defines a constructor that takes parameters for all instance variables
             this.uuid = uuid; // Initializes the uuid instance variable
             this.eventName = eventName; // Initializes the eventName instance variable
             this.eventType = eventType; // Initializes the eventType instance variable
@@ -845,11 +859,11 @@
             return eventDescription; // Returns the eventDescription instance variable
         }
 
-        public LocalDateTime getEventFrom() { // Defines a public method to get the eventFrom
+        public LocalTime getEventFrom() { // Defines a public method to get the eventFrom
             return eventTimeFrom; // Returns the eventTimeFrom instance variable
         }
 
-        public LocalDateTime getEventTo() { // Defines a public method to get the eventTo
+        public LocalTime getEventTo() { // Defines a public method to get the eventTo
             return eventTimeTo; // Returns the eventTimeTo instance variable
         }
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"8ea3ebe4-b132-4047-9e2f-b4e959ec8b27\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/example/cab302javaproject/LifestyleCalendar.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/example/cab302javaproject/LifestyleCalendar.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <favorite-branches>\r\n      <branch-storage>\r\n        <map>\r\n          <entry type=\"REMOTE\">\r\n            <value>\r\n              <list>\r\n                <branch-info repo=\"$PROJECT_DIR$\" source=\"origin/Ryan\" />\r\n              </list>\r\n            </value>\r\n          </entry>\r\n        </map>\r\n      </branch-storage>\r\n    </favorite-branches>\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"Ryan\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n    <option name=\"UPDATE_TYPE\" value=\"REBASE\" />\r\n  </component>\r\n  <component name=\"MavenImportPreferences\">\r\n    <option name=\"generalSettings\">\r\n      <MavenGeneralSettings>\r\n        <option name=\"mavenHomeTypeForPersistence\" value=\"WRAPPER\" />\r\n      </MavenGeneralSettings>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 5\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2dt3qd4un59vxWUSAaPkqpy5y1z\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,\r\n    &quot;Application.LifeStyleCalendar.executor&quot;: &quot;Run&quot;,\r\n    &quot;Application.LifestyleCalendar.executor&quot;: &quot;Run&quot;,\r\n    &quot;JUnit.All in CAB302JavaProject.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;Jacob&quot;,\r\n    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;/Users/ryanwallace/IdeaProjects/CAB302JavaProject/src/main/java/com/example/cab302javaproject&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"$PROJECT_DIR$/src/main/java/com/example/cab302javaproject\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\ryanwallace\\IdeaProjects\\CAB302Java\\src\\main\\resources\" />\r\n      <recent name=\"C:\\Users\\ryanwallace\\IdeaProjects\\CAB302Java\\src\\main\\resources\\com\\example\\cab302javaproject\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Application.LifestyleCalendar\">\r\n    <configuration name=\"LifeStyleCalendar\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.example.cab302javaproject.LifeStyleCalendar\" />\r\n      <module name=\"CAB302JavaProject\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"com.example.cab302javaproject.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"LifestyleCalendar\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.example.cab302javaproject.LifestyleCalendar\" />\r\n      <module name=\"CAB302JavaProject\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"com.example.cab302javaproject.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"All in CAB302JavaProject\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"CAB302JavaProject\" />\r\n      <option name=\"PACKAGE_NAME\" value=\"\" />\r\n      <option name=\"TEST_OBJECT\" value=\"package\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.LifestyleCalendar\" />\r\n        <item itemvalue=\"Application.LifeStyleCalendar\" />\r\n        <item itemvalue=\"JUnit.All in CAB302JavaProject\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"8ea3ebe4-b132-4047-9e2f-b4e959ec8b27\" name=\"Changes\" comment=\"\" />\r\n      <created>1710813739271</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1710813739271</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <breakpoint enabled=\"true\" type=\"java-exception\">\r\n          <properties class=\"java.lang.IllegalArgumentException\" package=\"java.lang\" />\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 5e28c60f9448424b3458ae5505557f0d8d00f061)
+++ b/.idea/workspace.xml	(date 1714398803051)
@@ -5,8 +5,11 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="8ea3ebe4-b132-4047-9e2f-b4e959ec8b27" name="Changes" comment="">
+      <change afterPath="$PROJECT_DIR$/calendarData.dat" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_29_2024_10_56_PM__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_4_29_2024_10_56_PM__Changes_.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/com/example/cab302javaproject/LifestyleCalendar.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/cab302javaproject/LifestyleCalendar.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/resources/userData.dat" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/userData.dat" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
